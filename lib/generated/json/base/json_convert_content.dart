// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:zhiliao/data/model/message_entity.dart';
import 'package:zhiliao/generated/json/message_entity_helper.dart';
import 'package:zhiliao/data/model/ledger_entity.dart';
import 'package:zhiliao/generated/json/ledger_entity_helper.dart';
import 'package:zhiliao/data/model/friend_entity.dart';
import 'package:zhiliao/generated/json/friend_entity_helper.dart';
import 'package:zhiliao/data/model/moment_entity.dart';
import 'package:zhiliao/generated/json/moment_entity_helper.dart';
import 'package:zhiliao/data/model/token_entity.dart';
import 'package:zhiliao/generated/json/token_entity_helper.dart';
import 'package:zhiliao/data/model/bill_entity.dart';
import 'package:zhiliao/generated/json/bill_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case MessageEntity:
			return messageEntityFromJson(data as MessageEntity, json) as T;			case LedgerEntity:
			return ledgerEntityFromJson(data as LedgerEntity, json) as T;			case FriendEntity:
			return friendEntityFromJson(data as FriendEntity, json) as T;			case MomentEntity:
			return momentEntityFromJson(data as MomentEntity, json) as T;			case TokenEntity:
			return tokenEntityFromJson(data as TokenEntity, json) as T;			case BillEntity:
			return billEntityFromJson(data as BillEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case MessageEntity:
			return messageEntityToJson(data as MessageEntity);			case LedgerEntity:
			return ledgerEntityToJson(data as LedgerEntity);			case FriendEntity:
			return friendEntityToJson(data as FriendEntity);			case MomentEntity:
			return momentEntityToJson(data as MomentEntity);			case TokenEntity:
			return tokenEntityToJson(data as TokenEntity);			case BillEntity:
			return billEntityToJson(data as BillEntity);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'MessageEntity':
			return MessageEntity().fromJson(json);			case 'LedgerEntity':
			return LedgerEntity().fromJson(json);			case 'FriendEntity':
			return FriendEntity().fromJson(json);			case 'MomentEntity':
			return MomentEntity().fromJson(json);			case 'TokenEntity':
			return TokenEntity().fromJson(json);			case 'BillEntity':
			return BillEntity().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'MessageEntity':
			return List<MessageEntity>();			case 'LedgerEntity':
			return List<LedgerEntity>();			case 'FriendEntity':
			return List<FriendEntity>();			case 'MomentEntity':
			return List<MomentEntity>();			case 'TokenEntity':
			return List<TokenEntity>();			case 'BillEntity':
			return List<BillEntity>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}
